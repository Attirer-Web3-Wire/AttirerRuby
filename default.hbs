<!DOCTYPE html>
<html lang="{{@site.locale}}" class="{{#if @custom.enable_dark_mode}} is-darkModeAdminSetting-enabled {{/if}}">

<!-- Weglot translations -->
{{!-- <link rel="alternate" hreflang="x-default" href="https://www.attirer.io">
<link rel="alternate" hreflang="en" href="https://www.attirer.io">do
<link rel="alternate" hreflang="fr" href="https://fr.attirer.io">do
<link rel="alternate" hreflang="de" href="https://de.attirer.io">do
<link rel="alternate" hreflang="pt" href="https://pt.attirer.io">do
<link rel="alternate" hreflang="es" href="https://es.attirer.io">do
<link rel="alternate" hreflang="zh" href="https://zh.attirer.io">do
<link rel="alternate" hreflang="ar" href="https://ar.attirer.io">do
<link rel="alternate" hreflang="ja" href="https://ja.attirer.io">do
<link rel="alternate" hreflang="ko" href="https://ko.attirer.io">do
<link rel="alternate" hreflang="tr" href="https://tr.attirer.io">do
<link rel="alternate" hreflang="zh-tw" href="https://zh-tw.attirer.io">
<link rel="alternate" hreflang="it" href="https://it.attirer.io">do
<link rel="alternate" hreflang="th" href="https://th.attirer.io">do
<link rel="alternate" hreflang="id" href="https://id.attirer.io">do
<link rel="alternate" hreflang="nl" href="https://nl.attirer.io">do
<link rel="alternate" hreflang="hi" href="https://hi.attirer.io">do
<script type="text/javascript" src="https://cdn.weglot.com/weglot.min.js">
</script>
<script>
    Weglot.initialize({
        api_key: 'wg_277f3f59c1cd31ddb4b9c7b5b4acaf8a9'
    });
</script> --}}

<head>

   {{!-- Document Settings --}}
    <meta charset="utf-8">
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />     
    {{!-- Base Meta --}}   
    <title>{{meta_title}}</title>
   
    {{!-- Styles'n'Scripts --}}      
    {{!-- <link rel="stylesheet" href="{{asset "built/screen.css"}}">
    <link rel="stylesheet" type="text/css" href="{{asset "built/theme.css"}}" /> --}}
<script src="https://kit.fontawesome.com/3746588d3a.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">

    <link rel="stylesheet" type="text/css" href="{{asset "built/main.css"}}" />
   
  {{!-- <link rel="preconnect" href="https://fonts.gstatic.com">
   <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">  --}}


  {{#if @custom.enable_dark_mode}}
    {{> dark-mode-accent-color }}
    {{> dark-mode-js }}
  {{/if}}

  <script>
    var pagination_next_page_number       = '{{ pagination.next }}',
        pagination_available_pages_number = '{{ pagination.pages }}',
        pagination_loading_text           = '{{t "Loading" }}',
        pagination_more_posts_text        = '{{t "Load More" }}',
        dark_mode_label_text              = '{{t "Dark" }}',
        light_mode_label_text             = '{{t "Light" }}';

    document.documentElement.classList.add('js-on');
  </script>

    {{ghost_head}}

</head>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=AW-10857397969"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'AW-10857397969');
</script>
<body class="{{body_class}}{{{block "body_class"}}}">
    <div class="site">

        {{> header}}
        <div class="site-content">
            {{{body}}}
        </div>
        {{> footer}}
    </div>

    {{> off-canvas}}
    {{> pswp}}

<script src="https://code.jquery.com/jquery-3.3.1.min.js"
        integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
        crossorigin="anonymous">
        </script>
   <script src="{{asset "built/main.min.js"}}"></script>
   
   {{!-- Start of My Blog: scripts --}}
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.22.0/prism.min.js" integrity="sha512-9+422Bs3A87UkWfp+qV80Nfv9arhbCXKY1rxrF2seorI36mIIstMiuBfyKLF1yH1nnzQkEWq2xrzT4XU3Z+vrA==" crossorigin="anonymous"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.22.0/plugins/autoloader/prism-autoloader.min.js" integrity="sha512-Q3qGP1uJL/B0sEmu57PKXjCirgPKMbg73OLRbTJ6lfHCVU5zkHqmcTI5EV2fSoPV1MHdKsCBE7m/aS6q0pPjRQ==" crossorigin="anonymous"></script>
   <script src="https://unpkg.com/mermaid@8.8.0/dist/mermaid.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.0/tocbot.min.js" integrity="sha512-oD3xGN8YTxenx6tdS4D/RKqO4OtORBQtAb2/FseM17GGMIi6jMwKUBc8duX4A5RwMOGGXoFBZrsqbOk8GpXFgQ==" crossorigin="anonymous"></script>   
   <script type="text/javascript">
      tocbot.init({
         tocSelector: '.post-toc',
         contentSelector: '.post-content',
         hasInnerContainers: true,
//         positionFixedClass: '.sidebar-column',      
      });
      
      mermaid.initialize({
         startOnLoad: true,
         theme: 'dark'
      });
   </script> 

    {{{block "scripts"}}}
    
    {{ghost_foot}}
</body>
<script>
document.addEventListener('DOMContentLoaded', function() {


    const contents = [
        {option:'English',language:'en'},
        {option:'French',language:'fr'},
        {option:'Deutsch',language:'de'},
        {option:'Español',language:'es'},
        {option:'Portugués',language:'pt'},
        {option:'Nederlands',language:'nl'},
        {option:'Italiano',language:'it'},
        {option:'हिंदी',language:'hi'},
        {option:'简体中文',language:'zh'},
        {option:'中国人',language:'zh-cn'},
        {option:'日本語',language:'ja'},
        {option:'한국인',language:'ko'},
        {option:'Türkçe',language:'tr'},
        {option:'Bahasa Indonesia',language:'id'},
        {option:'แบบไทย',language:'th'},
        {option:'malay',language:'ml'},
        {option:'Tiếng Việt',language:'vi'},
        {option:'عربي',language:'ar'},
    ];


    function updateLanguage(code, isManual = false) {
    const selectedSubdomain = code === 'www' ? '' : code + '.';
    const currentPath = window.location.pathname;
    let currentQueryString = window.location.search;

    if (isManual) {
        const queryParams = new URLSearchParams(currentQueryString);
        queryParams.set('langChange', 'manual');
        currentQueryString = '?' + queryParams.toString();
    }

    const newURL = `https://${selectedSubdomain}attirer.io${currentPath}${currentQueryString}`;
    window.location.href = newURL;
    }

    // Function to get the subdomain from the current URL
    function getSubdomain(hostname) {
        const parts = hostname.split('.');
        if (parts.length > 2) {
            return parts[0];
        }
        return null;
    }
    //new selector code

    function redirectToUserLanguage(currentSubdomain) {
    const userLang = navigator.language.split('-')[0]; // Get the base language code
    const isDefaultSubdomain = !currentSubdomain || currentSubdomain === 'www';
    
    // If the current subdomain is 'www', treat it as 'en'
    const effectiveSubdomain = isDefaultSubdomain ? 'en' : currentSubdomain;

    const supportedLangs = contents.map(lang => lang.language);
    const matchedLang = supportedLangs.find(lang => userLang === lang) || 'en';

    // Redirect if current subdomain doesn't match the browser language,
    // but avoid redirecting if it's already on the default 'www' for English
    if (matchedLang !== effectiveSubdomain) {
        const newSubdomain = matchedLang === 'en' ? 'www' : matchedLang;
        updateLanguage(newSubdomain);
    }
    }

  
    const currentSubdomain = getSubdomain(window.location.hostname);
    const queryParams = new URLSearchParams(window.location.search);




    const manualSelection = queryParams.get('langChange') === 'manual';
    if (!manualSelection) {
        redirectToUserLanguage(currentSubdomain);
    }

    const manualLanguageChange = queryParams.get('langChange') === 'manual';
    if (manualLanguageChange) {
        updateInternalLinks();
    }


   




    function updateInternalLinks() {
    const currentUrl = new URL(window.location.href);
    const currentQueryString = currentUrl.search;
    const currentSubdomain = getSubdomain(window.location.hostname);
    const baseDomain = 'attirer.io'; // Set your base domain here

    const internalLinks = document.querySelectorAll(
        `a[href^="/"], a[href^="http://${baseDomain}"], a[href^="https://${baseDomain}"], a[href^="http://www.${baseDomain}"], a[href^="https://www.${baseDomain}"]`
    );

    internalLinks.forEach(link => {
        const originalUrl = new URL(link.href, window.location.origin);

        // Update the hostname to include the current subdomain, if it's not already part of the hostname
        if (currentSubdomain && currentSubdomain !== 'www' && !originalUrl.hostname.startsWith(currentSubdomain + '.')) {
            originalUrl.hostname = currentSubdomain + '.' + baseDomain;
        }

        // Append the current query string
        originalUrl.search = currentQueryString;

        link.href = originalUrl.href;
    });
}







    const languageSelector = document.createElement('div');
    languageSelector.className = 'language-selector';
    languageSelector.id = 'languageSelector';

    // Create the selected language display area
    const selectedLanguage = document.createElement('div');
    selectedLanguage.className = 'selected-language';
    languageSelector.appendChild(selectedLanguage);
    
    selectedLanguage.addEventListener('click', () => {
    languageSelector.classList.toggle('open');
    });

    //const currentSubdomain = getSubdomain(window.location.hostname);
    
    
    let languageSet = false;
    for(const lang of contents){
        if(currentSubdomain === lang.language)
        {
            selectedLanguage.innerHTML = `${lang.option}`;
            translatePage(currentSubdomain);
            languageSet = true;
            break;
        }

    }

    if(!languageSet){
        selectedLanguage.innerHTML = `English`;
    }

    const optionsContainer = document.createElement('div');
    optionsContainer.className = 'options';
    languageSelector.appendChild(optionsContainer);



    contents.forEach(lang => {
        const option = document.createElement('div');
        option.className = 'dropdown-option';
        option.dataset.value = lang.language;
        option.innerHTML = `${lang.option}`;
        option.addEventListener('click', function() {
            
            selectedLanguage.innerHTML = this.innerHTML;
            languageSelector.classList.remove('open');
            updateLanguage(this.dataset.value, true); // Function to update the language of the page
    });
        optionsContainer.appendChild(option);
    });



    const style = document.createElement('style');
    style.type = 'text/css';

    // CSS styles as a string
    const cssString = `
    .language-selector {
      width:125px;
      position: relative;
      cursor: pointer;
      display: inline-block;
      border: 1px solid var(--color-border-secondary);
      border-radius: 5px;
      padding: 5px 10px;
      background: var(--color-background-primary);
    }

    .language-selector .selected-language {
      display: flex;
      align-items: center;
    }

    .language-selector .options {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: var(--color-background-primary);
      z-index: 1000;
      box-shadow: 0 8px 16px rgba(0,0,0,0.1);
    }

    .language-selector.open .options {
      display: block;
    }

    .language-selector .dropdown-option {
      padding: 5px 10px;
      cursor: pointer;
    }

    .language-selector .dropdown-option:hover {
      background-color: var(--color-hover-primary);
    }

    .flag-icon {
      width: 20px;
      height: 15px;
      margin-right: 5px;
    }
    .dropdown-option{
    color:var(--color-text-primary);
    }
  `;

    // Insert CSS into the style element
    style.appendChild(document.createTextNode(cssString));



    // Append the style element to the head
    document.head.appendChild(style);
    // Append the language selector to a target element
    const container = document.querySelector('.c-header__top-left');
    if (container) {
        container.appendChild(languageSelector);
    }

    
   

    // If the current subdomain matches a language code, set the dropdown value and translate the page
    if (contents.some(lang => lang.language === currentSubdomain)) {
        languageSelector.value = currentSubdomain;
        translatePage(currentSubdomain);
    }




    const postContainer = document.querySelector('.site-content'); // Change this to the actual container selector
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            //console.log("Mutation Observed");
            if (mutation.addedNodes.length > 0) {
                mutation.addedNodes.forEach((newNode) => {
                    
                    if (newNode.nodeType === Node.ELEMENT_NODE) {
                        translatePage(languageSelector.value, newNode);
                    }
                });
            }
        });
    });


     if (postContainer) {
        observer.observe(postContainer, { childList: true, subtree: true });
        //console.log("Observer Attached to", postContainer);
    }

    // Disconnect observer when page is unloaded to prevent memory leaks
   // window.addEventListener('beforeunload', () => observer.disconnect());


});

function translateTextNodes(element, translations, startIndex = 0) {
    let index = startIndex;
    for (let child of element.childNodes) {
        if (child.nodeType === Node.TEXT_NODE && child.textContent.trim() !== "") {
            child.textContent = translations[index++];
        }
    }
    return index;
}

function translatePage(targetLanguage,element = document.body) {
  //  const div = document.querySelector('body');

    console.log("Translations on ",element);
    const textNodes = element.querySelectorAll('p, h1, h2, h3, h4, h5, h6, a, span, li, td, th, strong, blockquote, figcaption, em');
    const texts = [];

    textNodes.forEach(node => {
        node.childNodes.forEach(child => {
            if (child.nodeType === Node.TEXT_NODE && child.textContent.trim() !== "") {
                texts.push(child.textContent.trim());
            }
        });
    });

    // Send the texts for translation
    fetch('https://translator.attirer.io/translate', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            texts: texts,
            targetLanguage: targetLanguage
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.translations && Array.isArray(data.translations)) {
            let startIndex = 0;
            textNodes.forEach(node => {
                startIndex =  translateTextNodes(node, data.translations, startIndex);
            });
        }
    })
    .catch(error => {
        console.error('Error translating:', error);
    });
}


</script>

</html>